<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace：命名空间，用于隔离sql，还有一个很重要的作用，后面会讲 -->
<mapper namespace="cn.itheima.mybatis.mapper.UserMapper" >

    <select id="findById" parameterType="Integer" resultType="cn.itheima.mybatis.pojo.User" >
        <!--跟据id查询用户-->
        select * from user where id = #{v}
    </select>

    <!--根据用户名模糊查询-->
    <select id="findByUserName" parameterType="String" resultType="cn.itheima.mybatis.pojo.User">
        select * from user where username like "%"#{v}"%"
    </select>

    <!--插入用户-->
    <insert id="insertUser" parameterType="cn.itheima.mybatis.pojo.User" >
        <selectKey resultType="Integer" keyProperty="id" order="AFTER" >
            select LAST_INSERT_ID()  <!--  这是mysql 数据库提供的 一个聚合函数  用于查询 最后添加的 ID-->
        </selectKey>
        insert into user (username,birthday,address,sex) value (#{username},#{birthday},#{address},#{sex})
    </insert>

    <!--根据id更新用户-->
    <update id="updateUserById" parameterType="cn.itheima.mybatis.pojo.User">
        update User set  username = #{username},address=#{address},sex=#{sex},birthday=#{birthday} where id=#{id}
    </update>

    <!--根据Id删除用户-->                         <!--据说此处 Integer 是别名     自己定义的，但未配置的东西，-->
    <delete  id="deleteUserById"  parameterType="Integer">
        delete from user where id = #{id}
    </delete>

    <!--根据用户名模糊查询-->
    <select id="findByUserPoJo" parameterType="UserPoJo" resultType="cn.itheima.mybatis.pojo.User">
        select * from user where username like "%"#{user.username}"%"
    </select>

    <!--多个id查询-->                                              <!-- 由于在SQLMapConfig.xml文件中配置了相应的 别名，所以可至直接使用别名-->
    <select id="findByIds" parameterType="UserPoJo" resultType="user" >
        select  *  from  user
        <where>  <!-- where标签  可以删除拼接的语句  其前面的 第一个  and -->                    <!-- foreach 标签用于循环-->
            <foreach collection="ids"  item="id" open=" id in (" close=")" separator=",">
                #{id}
            </foreach>
        </where>
    </select>

    <!--多个id查询-->                    <!-- Mapper中使用Integer数组 -->
    <select id="findByIds2" parameterType="Integer" resultType="user" >
        select  *  from  user
        <where>  <!-- where标签  可以删除拼接的语句  其前面的 第一个  and -->
            id in
            <foreach collection="array"  item="id" open="  (" close=")" separator=","> <!-- foreach 标签用于循环-->
                #{id}
            </foreach>

        </where>
    </select>

    <!--多个id查询-->                    <!-- Mapper中使用List数组 -->
    <select id="findByIds3" parameterType="List" resultType="user" >
        select  *  from  user
        <where>  <!-- where标签  可以删除拼接的语句  其前面的 第一个  and -->
            id in
            <foreach collection="list"  item="id" open="  (" close=")" separator=","> <!-- foreach 标签用于循环-->
                #{id}
            </foreach>

        </where>
    </select>
<!--====================================================================================================================================================-->


    <resultMap id="user" type="User">
        <result column="user_id" property="id"/>
        <result column="username" property="username"/>
        <!--一对多配置-->
        <collection property="ordersList" ofType="Orders">
            <id column="id" property="id"/>
            <result column="number" property="number"/>
        </collection>
    </resultMap>
    <!-- 查看用户订单 -->
    <select id="selectUserLsit" resultType="User" resultMap="user" >
        select o.id,o.user_id,o.number,u.username
        FROM  user u left join  orders o
        on u.id = o.user_id
    </select>



</mapper>